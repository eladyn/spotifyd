name: Continuous Deployment

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  publish:
    name: Publishing ${{ matrix.build_target }}-${{ matrix.artifact_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_target: [macos, linux, linux-armhf, linux-armv6]
        rust: [stable]
        artifact_type: ['slim', 'default', 'full']  # The build strategy will build all types for each OS specified
        include:
          - artifact_type: 'slim'               # Slim version has no features enabled by default.
            feature: ''
          - artifact_type: 'default'
            feature: 'dbus_keyring,dbus_mpris'  # Default version has all extra features enabled
          - artifact_type: 'full'
            feature: 'dbus_keyring,dbus_mpris'  # Full version has all extra features and audio backends enabled
          - build_target: macos
            os: macos-latest
            artifact_prefix: macos
            target: x86_64-apple-darwin
          - build_target: linux
            os: ubuntu-latest
            artifact_prefix: linux
            target: x86_64-unknown-linux-gnu
          - build_target: linux-armhf
            os: ubuntu-20.04
            artifact_prefix: linux-armhf
            target: arm-unknown-linux-gnueabihf
          - build_target: linux-armv6
            os: ubuntu-20.04
            artifact_prefix: linux-armv6
            target: arm-unknown-linux-gnueabihf
          - build_target: macos
            artifact_type: slim
            audio_backend: portaudio_backend
          - build_target: linux
            artifact_type: slim
            audio_backend: pulseaudio_backend
          - build_target: linux-armhf
            artifact_type: slim
            audio_backend: alsa_backend
          - build_target: linux-armv6
            artifact_type: slim
            audio_backend: alsa_backend
          - build_target: macos
            artifact_type: default
            audio_backend: portaudio_backend
          - build_target: linux
            artifact_type: default
            audio_backend: pulseaudio_backend
          - build_target: linux-armhf
            artifact_type: default
            audio_backend: alsa_backend
          - build_target: linux
            artifact_type: full
            audio_backend: pulseaudio_backend,alsa_backend,rodio_backend
          - build_target: macos
            artifact_type: full
            audio_backend: portaudio_backend,rodio_backend
          - build_target: linux-armhf
            artifact_type: full
            audio_backend: alsa_backend
        exclude:
          - build_target: linux-armv6
            artifact_type: 'default'            # Raspberry Pi toolchain is too old for dbus/systemd
          - build_target: linux-armv6
            artifact_type: 'full'               # Raspberry Pi toolchain is too old for dbus/systemd

    steps:
      - name: Installing Rust toolchain
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain ${{ matrix.rust }} --target ${{ matrix.target }}
      - name: Installing needed macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install awk dbus pkg-config portaudio
      - name: Install Cross-Compile Support (armhf)
        if: matrix.build_target == 'linux-armhf' || matrix.build_target == 'linux-armv6'
        uses: cyberjunk/gha-ubuntu-cross@v2
        with:
          arch: armhf
      - name: Installing needed Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq libasound2-dev libssl-dev libpulse-dev libdbus-1-dev
      - name: Installing needed Ubuntu armhf dependencies
        if: matrix.os == 'ubuntu-20.04' && matrix.build_target == 'linux-armhf'
        run: |
          sudo mkdir -p /build/sysroot
          sudo apt-get update
          sudo apt-get install -y -qq gcc-arm-linux-gnueabihf libc6-armhf-cross libc6-dev-armhf-cross
          sudo apt-get install libasound2:armhf libasound2-dev:armhf libssl-dev:armhf libssl1.1:armhf
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C linker=arm-linux-gnueabihf-gcc -L/usr/arm-linux-gnueabihf/lib -L/usr/lib/arm-linux-gnueabihf -L/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/arm-linux-gnueabihf" >> $GITHUB_ENV
      - name: Installing needed Ubuntu armv6 dependencies
        if: matrix.os == 'ubuntu-20.04' && matrix.build_target == 'linux-armv6'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq git build-essential gcc g++
          sudo wget -q "https://download.sourceforge.net/project/raspberry-pi-cross-compilers/Raspberry%20Pi%20GCC%20Cross-Compiler%20Toolchains/Bullseye/GCC%2010.3.0/Raspberry%20Pi%201%2C%20Zero/cross-gcc-10.3.0-pi_0-1.tar.gz"
          sudo tar xzf cross-gcc-10.3.0-pi_0-1.tar.gz
          sudo mv cross-pi-gcc-10.3.0-0 /cross-gcc
          sudo apt-get install libasound2:armhf libasound2-dev:armhf libssl-dev:armhf libssl1.1:armhf
          echo "/cross-gcc/bin" >> $GITHUB_PATH
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C linker=/cross-gcc/bin/arm-linux-gnueabihf-gcc -L/cross-gcc/arm-linux-gnueabihf/libc/usr/lib -L/cross-gcc/arm-linux-gnueabihf/libc/lib -L/cross-gcc/arm-linux-gnueabihf/lib -L/usr/lib/arm-linux-gnueabihf -L/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/arm-linux-gnueabihf" >> $GITHUB_ENV
      - name: Installing needed Ubuntu armhf dependencies (full)
        if: matrix.os == 'ubuntu-20.04' && matrix.build_target == 'linux-armhf' && matrix.artifact_type != 'slim'
        run: |
          # Make dbus-rs cross-compile, see https://github.com/diwic/dbus-rs/issues/184#issuecomment-520228758
          sudo apt-get install -y libdbus-1-dev:armhf libdbus-1-3:armhf libsystemd0:armhf libgcrypt20:armhf liblzma5:armhf liblz4-1:armhf libgpg-error0:armhf
          sudo ln -frs /lib/arm-linux-gnueabihf/libdbus-1.so.3 /lib/arm-linux-gnueabihf/libdbus-1.so
          sudo ln -rs /lib/arm-linux-gnueabihf/libgcrypt.so.20 /lib/arm-linux-gnueabihf/libgcrypt.so
          sudo ln -rs /lib/arm-linux-gnueabihf/libgpg-error.so.0 /lib/arm-linux-gnueabihf/libgpg-error.so
          sudo ln -rs /lib/arm-linux-gnueabihf/liblzma.so.5 /lib/arm-linux-gnueabihf/liblzma.so
          sudo ln -rs /lib/arm-linux-gnueabihf/libsystemd.so.0 /lib/arm-linux-gnueabihf/libsystemd.so
          sudo ln -rs /usr/lib/arm-linux-gnueabihf/liblz4.so.1 /usr/lib/arm-linux-gnueabihf/liblz4.so
          sudo mkdir -p /.cargo
          echo -e '[target.arm-unknown-linux-gnueabihf.dbus]\nrustc-link-lib = ["dbus-1", "gcrypt", "gpg-error", "lz4", "lzma", "systemd"]' | sudo tee -a /.cargo/config
      - name: Checking out sources
        uses: actions/checkout@v3
      - name: Running cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          toolchain: ${{ matrix.rust }}
          args: --locked --release --target ${{ matrix.target }} --no-default-features --features "${{ matrix.feature }},${{ matrix.audio_backend }}"
      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.tar.gz spotifyd
          shasum -a 512 spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.tar.gz > spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.sha512
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.tar.gz
            target/${{ matrix.target }}/release/spotifyd-${{ matrix.artifact_prefix }}-${{ matrix.artifact_type }}.sha512
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
